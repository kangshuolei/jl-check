package com.hbsi.entrustment.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.hbsi.dao.EntrustmentDataMapper;
import com.hbsi.dao.SteelWireDataMapper;
import com.hbsi.domain.EntrustmentData;
import com.hbsi.domain.SteelWireData;
import com.hbsi.entrustment.service.EntrustmentDataService;
import com.hbsi.exception.BaseException;
import com.hbsi.exception.ExceptionEnum;
import com.hbsi.response.Response;

/**
 * 委托单管理
 * @author lixuyang
 * @version 1.0，2018-09-27
 *
 */
@Service
public class EntrustmentDataServiceImpl implements EntrustmentDataService{
	
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private EntrustmentDataMapper entrustmentDataMapper;//委托单数据
	@Autowired
	private SteelWireDataMapper steelWireDataMapper;//钢丝数据

	/**
	 * 查询或新建委托单报告
	 * @param info
	 * @return
	 */
	@Override
	public Response<EntrustmentData> selectOrSaveEntData(String info) {
		JSONObject json = JSON.parseObject(info);
		String entNumber = json.getString("entrustmentNumber");// 委托号
		if(entNumber==null || "".equals(entNumber)) {
			logger.info("委托单号不能为空");
			return new Response<>("00007290", "委托单号不能为空", null);
		}
		EntrustmentData ed = null;
		try {
			// 查询委托单数据表，存在则显示信息
			ed = entrustmentDataMapper.selectEntrustmentData(entNumber);
			logger.info("根据entNumber:{}查询委托单,结果：{}", entNumber, ed);
			// 查询钢丝数据表，存在则显示信息 
			List<SteelWireData> list = steelWireDataMapper.selectByEnNum(entNumber);
			logger.info("根据entNumber:{}查询委托单,结果：{}条数据", entNumber, list.size());
			if (ed == null) {
				// 不存在则新建委托单
				EntrustmentData entData = new EntrustmentData();
				entData.setEntrustmentNumber(entNumber);// 委托单
				entData.setDate(new Date());// 日期
				Integer result = entrustmentDataMapper.insert(entData);
				logger.info("根据用户传入委托单信息:{}添加委托单信息,结果：{}", entData, result);
				if (result == 1) {
					return new Response<>(entData);
				}
			}
			//添加钢丝数据到返回结果
			ed.setSteelWireDataList(list);
		} catch (Exception e) {
			logger.error("查询或添加委托单信息异常 异常信息：{}", e.getMessage());
			throw new BaseException(ExceptionEnum.ENTRUSTMENT_DATA_SELECT_FAILED);
		}
		return new Response<>(ed);
	}

	/**
	 * 添加委托单数据和钢丝数据（提交按钮）
	 * @param ed
	 * @return
	 */
	@Override
	public Response<Integer> saveEntDataAndSteelData(String info) {
		JSONObject json = JSON.parseObject(info);
		String entrustmentNum = json.getString("entrustmentNumber");//委托单号
		String reviewer = json.getString("reviewer");//审核人
		Integer steelNumber = json.getInteger("steelNumber");//钢丝根数
		String testClerkNumber = json.getString("testClerkNumber");//试验员编号
		String testMachine = json.getString("testMachine");//试验机编号
		//钢丝数据List
		List<SteelWireData> list = new ArrayList<>();
		JSONArray array = json.getJSONArray("steelWireDataList");//钢丝数据列表
		for(int i = 0; i < array.size(); i++) {
			JSONObject object =array.getJSONObject(i);
			SteelWireData s = new SteelWireData();
			s.setEntrustmentNumber(entrustmentNum);
			s.setProductionNumber(object.getString("productionNumber"));//生产序号
			s.setpDiamete(object.getDouble("pDiamete"));//原直径
			s.setfDiamete(object.getDouble("fDiamete"));//成品直径
			s.setStrengthLevel(object.getString("strengthLevel"));//强度级别
			s.setUse(object.getString("use"));//用途
			s.setSurface(object.getString("surface"));//表面状态
			s.setBreakTensile(object.getDouble("breakTensile"));//破断拉力
			s.setTorsionTimes(object.getInteger("torsionTimes"));//扭转次数
			s.setBendingTimes(object.getInteger("bendingTimes"));//弯曲次数
			s.setSteelLength(object.getInteger("steelLength"));//长度
			s.setBoard(object.getInteger("board"));//机台
			s.setWheelNumber(object.getString("wheelNumber"));//轮号
			s.setGradeSteel(object.getString("gradeSteel"));//钢号
			s.setProducer(object.getString("producer"));//生产者
			s.setMemo(object.getString("memo"));//备注
			list.add(s);
		}
		String message= verifyData(entrustmentNum, reviewer, steelNumber, testClerkNumber, testMachine, list);
		if(message != null) {
			logger.info("验证数据信息，验证结果:{}", message);
			return new Response<>("00007290", message, null);
		}
		Integer result = null;
		try {
			//添加委托单数据
			EntrustmentData ed = new EntrustmentData();
			ed.setEntrustmentNumber(entrustmentNum);
			ed.setReviewer(reviewer);
			ed.setSteelNumber(steelNumber);
			ed.setTestClerkNumber(testClerkNumber);
			ed.setTestMachine(testMachine);
			Integer r = entrustmentDataMapper.updateByPrimaryKeySelective(ed);
			logger.info("根据用户传入委托单信息:{}添加委托单信息,结果：{}", ed, r);
			if(r==1) {
				//添加钢丝报告数据
				result = steelWireDataMapper.insertSteelData(list);
				logger.info("根据用户传入钢丝信息:{}添加钢丝数据信息,结果：{}", list.size(), result);
			}
		} catch (Exception e) {
			logger.error("添加委托单和钢丝数据信息异常 异常信息：{}", e.getMessage());
			throw new BaseException(ExceptionEnum.ENTRUSTMENT_DATA_SAVE_FAILED);
		}
		return new Response<>(result);
	}
	
	/**
	 * 验证委托单数据和钢丝数据
	 * @param info
	 * @return
	 */
	public String verifyData(String entrustmentNum, String reviewer, Integer steelNumber, String testClerkNumber, String testMachine, List<SteelWireData> list) {
		String message = null;
		if(entrustmentNum == null || "".equals(entrustmentNum)) {
			return "委托单号不能为空";
		}
		if(reviewer == null || "".equals(reviewer)) {
			return "审核人不能为空";
		}
		if(steelNumber == null || steelNumber==0) {
			return "钢丝根数不能为空";
		}
		if(testClerkNumber==null || "".equals(testClerkNumber)) {
			return "试验员编号不能为空";
		}
		if(testMachine == null || "".equals(testMachine)) {
			return "试验机编号不能为空";
		}
		if(list.size() == 0) {
			return "钢丝数据不能为空";
		}
		return message;
	}
	
}
