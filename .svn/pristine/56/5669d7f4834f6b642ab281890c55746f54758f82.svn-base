package com.hbsi.thickwire.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.hbsi.dao.DiameterDeviationMapper;
import com.hbsi.dao.ReverseBendingMapper;
import com.hbsi.dao.WireAttributesGbt200672017Mapper;
import com.hbsi.dao.WireDataMapper;
import com.hbsi.dao.WireRopeMapper;
import com.hbsi.domain.DiameterDeviation;
import com.hbsi.domain.ReverseBending;
import com.hbsi.domain.WireAttributesGbt200672017;
import com.hbsi.domain.WireData;
import com.hbsi.domain.WireRope;
import com.hbsi.entity.WireRopeData;
import com.hbsi.exception.BaseException;
import com.hbsi.exception.ExceptionEnum;
import com.hbsi.response.Response;
import com.hbsi.thickwire.service.ThickWireService;
import com.hbsi.util.Arith;
import com.hbsi.wire.service.WireRopeService;

@Service
public class ThickWireServiceImpl implements ThickWireService {
	/**
	 * author:shazhou
	 */
	private Logger logger = LoggerFactory.getLogger(WireRopeService.class);
	@Autowired
	private WireRopeMapper wireRopeMapper;
	@Autowired
	private WireDataMapper wireDataMapper;
	// GBT20067-2017 属性
	@Autowired
	private WireAttributesGbt200672017Mapper attMapper;
	@Autowired
	private WireRopeService wireRopeService;
	@Autowired
	private DiameterDeviationMapper diameterDeviationMapper;
	/* 扭转和弯曲次数 */
	@Autowired
	private ReverseBendingMapper reverseBendingMapper;

	public Response<WireRope> judgeThickWire(WireRope wireRope) {
		if (wireRope == null) {
			logger.info("传入数据为空");
		} else {
			/* 计算钢丝破断拉力 */
			double wireBreak = wireRopeService.calWireBreakTensile(wireRope);
//			wireBreak = Math.round(wireBreak * 100) / 100;
			wireBreak = Arith.getValue(wireBreak);
			/**
			 * 计算钢丝绳最小破断拉力总和 K*D*D*R0/1000
			 */
			// 查询钢丝绳系数
			WireAttributesGbt200672017 att = attMapper.selectTanningByStructure(wireRope.getStructure());
			double minBreakForce = att.getMinimumBreakingForce();
			double diamate = Double.parseDouble(wireRope.getSpecification());// 钢丝绳直径
			double strengthLevel = Double.parseDouble(wireRope.getStrengthLevel());
			double breakValue = Arith
					.div(Arith.mul(Arith.mul(minBreakForce, Math.pow(diamate, 2)), (double) strengthLevel), 1000.0);
			double wireBreakAll = breakValue * att.getTanningLossFactor();// 钢丝绳最小破断拉力总和
//			wireBreakAll = Math.round(wireBreakAll * 100) / 100;
			wireBreakAll = Arith.getValue(wireBreakAll);
			wireRope.setMinBreakTensile(wireBreakAll);
			wireRope.setMeasureBreakTensile(wireBreak);
			/* 修改钢丝绳数据 */
			wireRopeService.saveWireData(wireRope);

			Map<Double, int[]> resultMap = judgeSeparate(wireRope);
			/**
			 * sb1数据是存储到memo中，弱不合格则存储详细的不合格信息
			 */
			StringBuilder sb1 = new StringBuilder();
			/**
			 * sb的数据是存储到evaluation中，只有合格不合格这个字段
			 */
			StringBuilder sb = new StringBuilder();
			int[] all = resultMap.get(0d);
			Integer allowedNotQualified = (int) Math.round(wireRope.getWireDataList().size() * 0.05);
			if (wireBreak < wireBreakAll) {
				sb.append("不合格");
				sb1.append("钢丝实测破断拉力小于最小破断拉力总和,");
			} else if (all != null && all.length != 0) {
				if (all[0] > 0) {
					sb.append("不合格");
				} else if (all[1] > allowedNotQualified) {
					sb.append("不合格");
				} else if (all[2] > allowedNotQualified) {
					sb.append("不合格");
				} else {
					sb.append("合格");
				}
			}
			Iterator<Double> it = resultMap.keySet().iterator();
			while (it.hasNext()) {
				double ndiamate = it.next();
				if (ndiamate != 0 && ndiamate != 0.0) {
					int[] re = resultMap.get(ndiamate);
					int i = 0;
					for (; i < re.length; i++) {
						if (re[i] != 0) {// 有低值或者不合格则跳出本层循环
							break;
						}
					}
					if (i >= re.length) {
						continue;// 若该公称直径下没有不合格或者低值则跳出本次循环
					} else {
						// 若该公称直径下有不合格则显示
						sb1.append("Φ").append(String.format("%.2f", ndiamate)).append("钢丝[");

						if (re[1] > 0) {
							sb1.append("直径有").append(re[1]).append("根不合格");
						}
						if (re[2] > 0) {
							sb1.append("抗拉强度有").append(re[2]).append("根不合格");
						}
						if (re[3] > 0) {
							sb1.append("扭转次数有").append(re[3]).append("根不合格");
						}
					}
					sb1.append("] ");
				}
			}

			wireRope.setEvaluation(sb.toString());
			wireRope.setMemo(sb1.toString());
			try {
				int i = wireRopeMapper.updateRopeEvaluatuion(wireRope);
			} catch (Exception e) {
				logger.error("钢丝绳判定结果保存失败,{}", e);
				throw new BaseException(ExceptionEnum.WIREROPE_SAVE_ERROR);
			}
		}
		return new Response<WireRope>(wireRope);
	}

	public Map<Double, int[]> judgeSeparate(WireRope wireRope) {

		// 查询钢丝绳系数
		WireAttributesGbt200672017 att = attMapper.selectTanningByStructure(wireRope.getStructure());
		// 钢丝绳的股类型
		List<WireData> dataList = wireRope.getWireDataList();
		/**
		 * 判断钢丝绳表面状态
		 */
		String surface1 = wireRope.getSurfaceState();
		String surface = "";
		if (surface1.contains("光面")) {
			surface = "UB";
		} else if (surface1.contains("A类") || surface1.contains("A级")) {
			surface = "A";
		} else if (surface1.contains("B类") || surface1.contains("B级")) {
			surface = "UB";
		} else if (surface1.contains("AB类") || surface1.contains("AB级")) {
			surface = "AB";
		} else if (surface1.contains("光面及B类") || surface1.contains("光面及B级")) {
			surface = "UB";
		}
		// 钢丝绳的抗拉强度级别
		Integer strengthLevel = Integer.parseInt(wireRope.getStrengthLevel());
		/**
		 * 按照试验钢丝数据公称直径组合数据
		 */
		Map<Double, List<WireData>> dataMap = new HashMap<>();
		List<WireData> l = null;
		for (WireData wireData : dataList) {
			if (!dataMap.containsKey(wireData.getnDiamete1())) {
				l = new ArrayList<WireData>();
				l.add(wireData);
			} else {
				l = dataMap.get(wireData.getnDiamete1());
				l.add(wireData);
			}
			dataMap.put(wireData.getnDiamete1(), l);
		}

		/**
		 * 获取试验钢丝类别公称抗拉强度
		 */
		Map<Double, Integer> strengthMap = new HashMap<>();
		String cl = wireRope.getTrialClass();
		if (cl == null || "".equals(cl)) {
			WireRope wr = wireRopeMapper.selectByEnsNum(wireRope.getEnstrustmentNumber());
			cl = wr.getTrialClass();
		}
		List<String[]> nlist = new ArrayList<>();
		if (cl != null && !"".equals(cl)) {

			String[] str = cl.split(",");
			for (int i = 0; i < str.length; i++) {
				String s = str[i];
				String[] ss = s.split("\\*");
				String[] sa = ss[1].split("/");
				ss[1] = sa[0];
				nlist.add(ss);
			}
		} else {
			return null;
		}
		for (int i = 0; i < nlist.size(); i++) {
			String[] nd = nlist.get(i);
			double ndiamate = Double.parseDouble(nd[0]);
			if (nd.length > 2) {
				Integer strength = Integer.parseInt(nd[2]);
				strengthMap.put(ndiamate, strength);
			} else {
				strengthMap.put(ndiamate, strengthLevel);
			}
		}

		// 公称直径
		double ndiamate = 0;
		// 钢丝最小破断拉力系数
		DiameterDeviation dd = null;// 钢丝直径允许最大偏差 根据公称直径所在范围进行查询
		// 查询扭转弯曲次数的最低值条件
		ReverseBending rb = new ReverseBending();
		rb.setStandardNum(wireRope.getJudgeStandard());
		rb.setRatedStrength(strengthLevel + "");
		rb.setSurfaceState(surface);
		// 抗拉强度允许偏差值判断
		WireRopeData wireRopeData = new WireRopeData();
		wireRopeData.setStandardNum(wireRope.getJudgeStandard());
		/**
		 * 定义数组，保存判定结果
		 */
		Map<Double, int[]> resultMap = new HashMap<Double, int[]>();
		int[] all = new int[4];// 保存总的结果
		/**
		 * 循环数据，进行判定
		 */
		Iterator<Double> it = dataMap.keySet().iterator();
		while (it.hasNext()) {
			ndiamate = it.next();
			// 查询得到对应的公称抗拉强度（因为实验钢丝类别可能存在1.35*6/36*1770这种情况）
			Integer wireStrengthLevel = strengthMap.get(ndiamate);
			if (wireStrengthLevel == null || wireStrengthLevel == 0) {
				wireStrengthLevel = strengthLevel;
			}
			// 根据公称直径查询抗拉强度允许偏差值
			wireRopeData.setNdiamete(ndiamate);
			wireRopeData.setSurface(surface);
			// 查询公称直径对应的扭转弯曲次数
			rb.setfDiamete(ndiamate);
			rb.setRatedStrength(wireStrengthLevel + "");
//				 if(wireRope.getStructure().contains("K")) {
//					rb.setType("P"); 
//				 }else {
//					 rb.setType("C");
//				 }
			List<ReverseBending> rlist = reverseBendingMapper.selectRBDataByCon(rb);
			int[] d = new int[2];
			for (ReverseBending r : rlist) {
				// c 圆股钢丝
				if ("C".equals(r.getType())) {
					d[0] = r.getValueRob();
					// p压实股钢丝
				} else if ("P".equals(r.getType())) {
					d[1] = r.getValueRob();
				}
			}
			// 直径判断：允许有不超过5%超出上述规定而不超过上述规定的50%
			DiameterDeviation diameterDeviation = diameterDeviationMapper.selectDiaByBlurType(wireRopeData);
			Double dDeviation = diameterDeviation.getValue();
			// 用户记录该直径每项的判定结果int[0]直径超过50%的根数 int[1]直径不合格根数 int[2]抗拉强度不合格根数 int[3]弯曲不合格根数
			// int[4]扭转不合格根数
			int[] re = new int[4];
			List<WireData> dlist = dataMap.get(ndiamate);
			// 求得压实股钢丝的抗拉强度：平均抗拉强度值strengthForJudge
			double sumStrength = 0;
			double averageStrength;
			for (WireData wireData : dlist) {
				double d1 = (Arith.div(wireData.getBreakTensile1(),
						Arith.mul(Math.PI, Arith.mul(wireData.getnDiamete1() / 2, wireData.getnDiamete1() / 2))))
						* 1000;
				wireData.setTensileStrength((int) Math.round(d1));
				wireDataMapper.updateByPrimaryKeySelective(wireData);
				sumStrength = +wireData.getTensileStrength();
			}
			averageStrength = Arith.div(sumStrength, (double) dlist.size());
			Integer strengthForJudge = (int) Math.round(Arith.mul(averageStrength, 0.92));
			// 对根据公称直径分好组的dlist进行判定
			for (WireData wireData : dlist) {
				// 判定之前先把之前的判定结果**号去掉
				wireData.setDiameteJudge("");
				wireData.setStrengthJudge("");
				wireData.setTensileJudge("");
				wireData.setTurnJudge("");
				wireData.setWindingJudge("");
				wireData.setZincJudge("");
				wireDataMapper.updateByPrimaryKey(wireData);
				// 直径判定
				if (ObjectUtils.isEmpty(wireData.getDiamete1())) {
					throw new BaseException(ExceptionEnum.DAIMETER_INPUT_EMPOTY);
				}
				double diamate = wireData.getDiamete1();
				if (Math.abs(Arith.sub(diamate, ndiamate)) > dDeviation * 1.5) {
					re[0]++;
					all[0]++;
					wireData.setDiameteJudge("**");
				} else if (Math.abs(Arith.sub(diamate, ndiamate)) > dDeviation) {
					re[1]++;
					all[1]++;
					wireData.setDiameteJudge("**");
				}
				// 抗拉强度判定
				double strength = wireData.getTensileStrength();
				System.out.println(strength + "这个数值用于判定");
				if (wireRope.getStructure().contains("K")) {
					if (strength < strengthForJudge) {
						// 抗拉强度不合格
						re[2]++;
						all[2]++;
						wireData.setStrengthJudge("**");
					}
					if (wireData.getTurnTimes() < d[1]) {
						// 扭转不合格
						re[3]++;
						all[3]++;
						wireData.setTurnJudge("**");
					}
				} else {
					System.out.println(Math.subtractExact(wireStrengthLevel, 50));
					if (Math.round(strength) < Math.subtractExact(wireStrengthLevel, 50)) {
						System.out.println("是否曾经执行过");
						// 抗拉强度不合格
						re[2]++;
						all[2]++;
						wireData.setStrengthJudge("**");
					}
					if (wireData.getTurnTimes() < d[0]) {
						// 扭转不合格
						re[3]++;
						all[3]++;
						wireData.setTurnJudge("**");
					}
				}
				// 将判定结果写回WireData表中
				wireDataMapper.updateByPrimaryKey(wireData);
				// 扭转次数判定 先判断是圆形钢丝还是压实股钢丝
			}
			resultMap.put(ndiamate, re);
		}
		resultMap.put(0d, all);
		return resultMap;
	}
}
