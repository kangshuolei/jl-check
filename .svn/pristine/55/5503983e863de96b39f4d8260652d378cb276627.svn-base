package com.hbsi.util;

import java.math.BigDecimal;

public class Arith {

	private static final int DEF_DIV_SCALE = 10;

	/**
	 * * 两个Double数相加 *
	 * 
	 * @param v1 *
	 * @param v2 *
	 * @return Double
	 */
	public static Double add(Double v1, Double v2) {
		BigDecimal b1 = new BigDecimal(v1.toString());
		BigDecimal b2 = new BigDecimal(v2.toString());
		return new Double(b1.add(b2).doubleValue());
	}

	/**
	 * * 两个Double数相减 *
	 * 
	 * @param v1 *
	 * @param v2 *
	 * @return Double
	 */
	public static Double sub(Double v1, Double v2) {
		BigDecimal b1 = new BigDecimal(v1.toString());
		BigDecimal b2 = new BigDecimal(v2.toString());
		return new Double(b1.subtract(b2).doubleValue());
	}

	/**
	 * * 两个Double数相乘 *
	 * 
	 * @param v1 *
	 * @param v2 *
	 * @return Double
	 */
	public static Double mul(Double v1, Double v2) {
		BigDecimal b1 = new BigDecimal(v1.toString());
		BigDecimal b2 = new BigDecimal(v2.toString());
		return new Double(b1.multiply(b2).doubleValue());
	}

	/**
	 * * 两个Double数相除 *
	 * 
	 * @param v1 *
	 * @param v2 *
	 * @return Double
	 */
	public static Double div(Double v1, Double v2) {
		BigDecimal b1 = new BigDecimal(v1.toString());
		BigDecimal b2 = new BigDecimal(v2.toString());
		return new Double(b1.divide(b2, DEF_DIV_SCALE, BigDecimal.ROUND_HALF_UP).doubleValue());
	}

	/**
	 * * 两个Double数相除，并保留scale位小数 *
	 * 
	 * @param v1 *
	 * @param v2 *
	 * @param scale *
	 * @return Double
	 */
	public static Double div(Double v1, Double v2, int scale) {
		if (scale < 0) {
			throw new IllegalArgumentException("The scale must be a positive integer or zero");
		}
		BigDecimal b1 = new BigDecimal(v1.toString());
		BigDecimal b2 = new BigDecimal(v2.toString());
		return new Double(b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue());
	}

	/**
	 * 修约规则（4舍6入5单双）抗拉强度千值修约规则
	 * 
	 * @param d
	 * @return
	 */
	public static int revision(Double d) {
		int i = 0;
		String number = String.format("%.5f", d);//防止小数点后 无数值
		String[] strs = number.split("\\.");
		String s = strs[0].toString();// 整数部分
		String s0 = strs[1].toString();// 小数部分
//		System.out.println("整数部分====" + s);
//		System.out.println("小数部分====" + s0);
		// 截取字符串
		String ss = s.substring(3, 4);
//		System.out.println("整数最后一位" + ss);
		String s1 = s0.substring(0, 1);
//		System.out.println("小数第一位" + s1);
		String s2 = s0.substring(1, 2);
//		System.out.println("小数第二位" + s2);
		String s3 = s0.substring(2, 3);
//		System.out.println("小数第三位" + s3);
		// 判断第一位小数
		int x = Integer.parseInt(ss);//整数最后一位
		int a = Integer.parseInt(s1);//第一位小数
		int b = Integer.parseInt(s2);//第二位小数
		int c = Integer.parseInt(s3);//第三位小数
		if(a>=0 && a<=4) {//舍
			i = Integer.parseInt(s);
		}else if(a>=6 && a<=9) {//入
			i = Integer.parseInt(s) + 1;
		}else if(a==5) {
			//如果5后面有>0的数值，进位
			if(b > 0) {//入
				i = Integer.parseInt(s) + 1;
			}else if(b == 0 || c == 0|| s3 == null) {
				if (x % 2 == 0) {//舍
					System.out.println("偶数");
					i = Integer.parseInt(s);
				}else {//入
					System.out.println("奇数");
					i = Integer.parseInt(s) + 1;
				}
			}
		}
//		System.out.println(i);
		return i;
	}
	
	/**
	 * 对破断拉力进行修约
	 * @param n
	 * @return
	 */
	public static double getValue(double n) {
		if(n<100) {
			/**
			 * 保留一位小数
			 */
			double result=0;
			int x=(int)(n*100);
			int l1=x%10;//第二位小数
			if(l1<5) {
				result=Math.round(n*10)/10.0;
			}else if(l1>5) {
				result=Math.round(n*10)/10.0;
			}else if(l1==5) {//看第三位小数
				String s=(n+"00").substring((n+"00").indexOf('.')+3);
				long s0=Long.parseLong(s);
				if(s0!=0) {//不是0
					int a=Integer.parseInt(s.charAt(0)+"");
					if(a%2==0) {
						result=Math.round((Math.round(n*10)/10.0-0.1)*10)/10.0;
					}else {
						result=Math.round(n*10)/10.0;
					}
				}else {
					int a=((int)n)%10;
					if(a%2==0) {
						result=Math.round((Math.round(n*10)/10.0-0.1)*10)/10.0;
					}else {
						result=Math.round(n*10)/10.0;
					}
				}
			}
			return result;
		}else if(n<1000) {
			/**
			 * 小数舍弃
			 */
			Integer x=(int)(n*10);
			int l1=x%10;
			int result=0;
			if(l1<5&&l1>0) {
				 result=(int)n;
			}else if(l1>5) {
				 result=(int)n+1;
			}else if(l1==5) {
				System.out.println(n);
				//判断后一位小数，如果不是都是0，单数进1，双数舍去；若都是0，则看个位数，单数进1，偶数舍去
				String s=(n+"0").substring((n+"0").indexOf('.')+2);
				long s0=Long.parseLong(s);
				if(s0!=0) {//如果不是0，则看第二位小数
					int a=Integer.parseInt(s.charAt(0)+"") ;
					if(a%2==0) {
						result=(int)n;
					}else {
						result=(int)n+1;
					}
				}else {//如果是0，则看舍弃的前一位，即个位数
					int y=(int)n;
					int l2=y%10;
					if(l2%2==0) {
						result=(int)n;
					}else {
						result=(int)n+1;
					}
				}
			}
			return result;
		}else {
			/**
			 * 个位数修约成0
			 */
			int x=(int)n;
			int l1=x%10;
			int result=0;
			if(l1<5) {
				result=x-l1;
			}else if(l1>5){
				result=x-l1+10;
			}else if(l1==5) {
				String s=(n+"0").substring((n+"0").indexOf('.')+1);
				long s0=Long.parseLong(s);
				if(s0!=0) {//如果不是0，则看舍弃的后一位，即第一位小数
					int a=Integer.parseInt(s.charAt(0)+"") ;
					if(a%2==0) {
						result=x-l1;
					}else {
						result=x-l1+10;
					}
				}else {//如果是0，则看舍弃的前一位，即十位数
					int a=(x%100)/10;//十位数
					if(a%2==0) {
						result=x-l1;
					}else {
						result=x-l1+10;
					}
				}
			}
			return result;
		}
	}
	
	

	public static void main(String[] args) {
		double d = 1956.5;
//		double d = 883.51568899989889;
//		System.out.println(getValue(d));
		
		System.out.println(revision(d));
	}

}
