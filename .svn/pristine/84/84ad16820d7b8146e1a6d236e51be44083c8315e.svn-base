package com.hbsi.steel.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSONObject;
import com.hbsi.dao.ReverseBendingMapper;
import com.hbsi.dao.SampleRecordMapper;
import com.hbsi.dao.SteelTensileStrengthMapper;
import com.hbsi.dao.SteelWireDataMapper;
import com.hbsi.domain.ReverseBending;
import com.hbsi.domain.SampleRecord;
import com.hbsi.domain.SteelTensileStrength;
import com.hbsi.domain.SteelWireData;
import com.hbsi.exception.BaseException;
import com.hbsi.exception.ExceptionEnum;
import com.hbsi.response.Response;
import com.hbsi.steel.service.SteelService;
import com.hbsi.util.Arith;

/**
 * 钢丝报告处理
 * @author lixuyang
 * @version 1.0，2018-09-29
 *
 */
@Service
public class SteelServiceImpl implements SteelService{
	
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private SteelWireDataMapper steelWireDataMapper;//钢丝
	@Autowired
	private SampleRecordMapper sampleRecordMapper;//试验记录
	@Autowired
	private SteelTensileStrengthMapper steelTensileStrengthMapper;//钢丝抗拉强度
	@Autowired
	private ReverseBendingMapper reverseBendingMapper;//扭转或弯曲

	/**
	 * 调入委托单数据（查询机器数据）
	 * @param info
	 * @return
	 */
	@Override
	public Response<List<SampleRecord>> selectSteelData(String info) {
		JSONObject json = JSONObject.parseObject(info);
		String entrustmentNumber = json.getString("entrustmentNumber");
		if(entrustmentNumber==null || "".equals(entrustmentNumber)) {
			logger.info("委托单号不能为空");
			return new Response<>("00007290", "委托单号不能为空", null);
		}
		//根据委托单号查询试验员编号和试验机编号
		SampleRecord s = new SampleRecord();
		s.setEntrustmentNumber(entrustmentNumber);
		List<SampleRecord> list = null;
		try {
			list = sampleRecordMapper.selectSampleRecordList(s);
			logger.info("根据entrustmentNumber:{}查询试验机器信息,结果：{}", s.getEntrustmentNumber(), list);
		} catch (Exception e) {
			logger.error("查询机器数据信息异常 异常信息：{}", e.getMessage());
			throw new BaseException(ExceptionEnum.STEEL_SELECT_FAILED);
		}
		return new Response<>(list);
	}

	/**
	 * 查询钢丝数据(查询试验数据)？未做完
	 * @param info
	 * @return
	 */
	@Override
	public Response<List<SteelWireData>> selectSteelWireList(String info) {
		JSONObject json = JSONObject.parseObject(info);
		String entrustmentNumber = json.getString("entrustmentNumber");
		if(entrustmentNumber==null || "".equals(entrustmentNumber)) {
			logger.info("委托单号不能为空");
			return new Response<>("00007290", "委托单号不能为空", null);
		}
		List<SteelWireData> list = null;
		try {
			list = steelWireDataMapper.selectByEnNum(entrustmentNumber);
			logger.info("根据entrustmentNumber:{}查询钢丝数据信息,结果：{}", entrustmentNumber, list);
		} catch (Exception e) {
			logger.error("查询钢丝数据信息异常 异常信息：{}", e.getMessage());
			throw new BaseException(ExceptionEnum.STEEL_WIRE_SELECT_FAILED);
		}
		return new Response<>(list);
	}

	/**
	 * 添加钢丝数据
	 * @param list
	 * @return
	 */
	@Override
	public Response<Integer> saveSteelWire(List<SteelWireData> list) {
		if(list.size() <= 0) {
			logger.info("钢丝数据不能为空");
			return new Response<>("00007290", "钢丝数据不能为空", null);
		}
		Integer result = null;
		try {
			result = steelWireDataMapper.updateByPrimaryKeySelective(list);
			logger.info("根据list:{}添加钢丝数据信息,结果：{}", list, result);
		} catch (Exception e) {
			logger.error("添加钢丝数据信息异常 异常信息：{}", e.getMessage());
			throw new BaseException(ExceptionEnum.STEEL_WIRE_SAVE_FAILED);
		}
		return new Response<>(result);
	}

	/**
	 * 修改钢丝数据（判定）
	 * @param list
	 * @return
	 */
	@Override
	public Response<Integer> updateSteelWire(List<SteelWireData> list) {
		String standardNum = "J&L10302-2018";
		if(list.size() <= 0) {
			logger.info("钢丝数据不能为空");
			return new Response<>("00007290", "钢丝数据不能为空", null);
		}
		List<SteelWireData> swList = new ArrayList<>();
		for(int i = 0; i < list.size(); i++) {
			SteelWireData s = new SteelWireData();
			s.setId(list.get(i).getId());
			s.setfDiamete(list.get(i).getfDiamete());//成品直径
			s.setStrengthLevel(list.get(i).getStrengthLevel());//强度级别
			s.setUse(list.get(i).getUse());//用途
			s.setSurface(list.get(i).getSurface());//表面状态
			s.setBreakTensile(list.get(i).getBreakTensile());//破断拉力
			//计算抗拉强度
			double d = (Arith.div(s.getBreakTensile(), Arith.mul(Math.PI, Arith.mul(s.getfDiamete()/2, s.getfDiamete()/2))))*1000;
//			System.out.println(d);
			s.setTensileStrength(Arith.revision(d));//抗拉强度
			s.setTorsionTimes(list.get(i).getTorsionTimes());//扭转次数
			s.setBendingTimes(list.get(i).getBendingTimes());//弯曲次数
			//计算判定结果
			//1.查询抗拉强度范围
			SteelTensileStrength sts = new SteelTensileStrength();
			sts.setStandardNum(standardNum);//标准文件编号
			sts.setRatedStrength(s.getStrengthLevel());//公称强度
			sts.setUsage(s.getUse());//用途
			sts.setfDiamete(s.getfDiamete());//成品直径
			sts.setStrengthValue(s.getTensileStrength());//抗拉强度值
			SteelTensileStrength sts1 = steelTensileStrengthMapper.selectSteelTSData(sts);
			logger.info("根据sts:{}查询抗拉强度范围值,结果：{}", sts, sts1);
			//2.查询扭转值
			ReverseBending r = new ReverseBending();
			r.setStandardNum(standardNum);//标准文件编号
            r.setRatedStrength(s.getStrengthLevel());//公称强度
            if(s.getSurface().equals("U")||s.getSurface().equals("B")) {
            	r.setSurfaceState("UB");//表面状态
            }else{
            	r.setSurfaceState(s.getSurface());
            }
            r.setUsage(s.getUse());//用途
            r.setType("R");//扭转
            r.setfDiamete(s.getfDiamete());//成品直径
            r.setRob(s.getTorsionTimes());//扭转次数
            System.out.println(r);
            ReverseBending r1 = reverseBendingMapper.selectRBData(r);
            logger.info("根据r:{}查询扭转值,结果：{}", r, r1);
            //3.查询弯曲值
            ReverseBending b = new ReverseBending();
			b.setStandardNum(standardNum);//标准文件编号
            b.setRatedStrength(s.getStrengthLevel());//公称强度
            if(s.getSurface().equals("U")||s.getSurface().equals("B")) {
            	b.setSurfaceState("UB");//表面状态
            }else{
            	b.setSurfaceState(s.getSurface());
            }
            b.setUsage(s.getUse());//用途
            b.setType("B");//弯曲
            b.setfDiamete(s.getfDiamete());//成品直径
            b.setRob(s.getBendingTimes());//弯曲次数
            ReverseBending b1 = reverseBendingMapper.selectRBData(b);
            logger.info("根据b:{}查询弯曲值,结果：{}", b, b1);
            
            //（0代表合格，1代表重判后合格，2代表不合格）
            int stateX = 0;//抗拉强度
            int stateY = 0;//扭转
            int stateZ = 0;//弯曲
            SteelTensileStrength sts2 = null;
            ReverseBending r2 = null;
            ReverseBending b2 = null;
            if(sts1 != null) {
            	if(s.getTensileStrength() >= sts1.getStrengthValueMin() && s.getTensileStrength() <= sts1.getStrengthValueMax()) {
            		//抗拉强度合格
            		stateX = 0;
            	}else {
            		//抗拉强度不合格，重新判定
            		if(s.getUse().equals("Z")) {//重要用途，按一般用途重新判定
            			sts.setUsage("Y");
            			sts2 = steelTensileStrengthMapper.selectSteelTSData(sts);
                        logger.info("根据sts:{}重新判定抗拉强度值,结果：{}", sts, sts2);
                        if(sts2 != null) {
                        	stateX = 1;
                        }else {
                        	stateX = 2;
                        }
            		}else if(s.getUse().equals("Y")){//一般用途，降级判定
            			sts2 = steelTensileStrengthMapper.selectSteelTSData2(sts);
            			logger.info("根据sts:{}重新判定抗拉强度值,结果：{}", sts, sts2);
            			if(sts2 != null) {
            				stateX = 1;
            			}else {
            				stateX = 2;
            			}
            		}
            	}
            }
            if(r1 != null) {
    			if(s.getTorsionTimes() >= r1.getValueRob()) {
    				//扭转合格
    				stateY = 0;
    			}else {
    				//扭转不合格，重新判定
    				if(s.getUse().equals("Z")) {//重要用途，按一般用途重新判定
    					r.setUsage("Y");
    					r2 = reverseBendingMapper.selectRBData(r);
    					logger.info("根据r:{}重新判定扭转值,结果：{}", r, r2);
    					if(r2 != null) {
    						stateY = 1;
    					}else {
    						stateY = 2;
    					}
    				}else if(s.getUse().equals("Y")){//一般用途，降级判定
    					r2 = reverseBendingMapper.selectRBData2(r);
    					logger.info("根据r:{}重新判定扭转值,结果：{}", r, r2);
    					if(r2 != null) {
    						stateY = 1;
    					}else {
    						stateY = 2;
    					}
    				}
    			}
    		}
            if(b1 != null) {
				if(s.getBendingTimes() >= b1.getValueRob()) {
					//弯曲合格
					stateZ = 0;
				}else {
					//弯曲不合格，重新判定
					if(s.getUse().equals("Z")) {//重要用途，按一般用途重新判定
						b.setUsage("Y");
						b2 = reverseBendingMapper.selectRBData(b);
						logger.info("根据b:{}重新判定弯曲值,结果：{}", b, b2);
						if(b2 != null) {
    						stateZ = 1;
    					}else {
    						stateZ = 2;
    					}
					}else if(s.getUse().equals("Y")){//一般用途，降级判定
						b2 = reverseBendingMapper.selectRBData2(b);
						logger.info("根据b:{}重新判定弯曲值,结果：{}", b, b2);
						if(b2 != null) {
							stateZ = 1;
						}else {
    						stateZ = 2;
    					}
					}
				}
			}
            if(stateX == 0 && stateY == 0 && stateZ == 0) {
            	s.setJudge(s.getStrengthLevel() + s.getUse());//判定
            }else if(stateX ==1 && stateY == 0 && stateZ == 0) {
            	s.setJudge(sts2.getRatedStrength() + sts2.getUsage());//判定
            }else if(stateX == 0 && stateY == 1 && stateZ == 0) {
            	s.setJudge(r2.getRatedStrength() + r2.getUsage());//判定
            }else if(stateX == 0 && stateY == 0 && stateZ == 1) {
            	s.setJudge(b2.getRatedStrength() + b2.getUsage());//判定
            }else if(stateX ==2 || stateY == 2 || stateZ == 2) {
            	s.setJudge("不合格");
            }
			swList.add(s);
		}
		Integer result = null;
		try {
			result = steelWireDataMapper.updateByPrimaryKeySelective(swList);
			logger.info("根据swList:{}修改钢丝数据信息,结果：{}", swList, result);
		} catch (Exception e) {
			logger.error("修改钢丝数据信息异常 异常信息：{}", e.getMessage());
			throw new BaseException(ExceptionEnum.STEEL_WIRE_UPDATE_FAILED);
		}
		return new Response<>(result);
	}

}
