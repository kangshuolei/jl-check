package com.hbsi.wire.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hbsi.dao.DiameterDeviationMapper;
import com.hbsi.dao.EntrustmentMapper;
import com.hbsi.dao.SteelWireDataMapper;
import com.hbsi.dao.TensileStrengthMapper;
import com.hbsi.dao.WireAttributesGbt201182017Mapper;
import com.hbsi.dao.WireDataMapper;
import com.hbsi.dao.WireRopeMapper;
import com.hbsi.domain.DiameterDeviation;
import com.hbsi.domain.Entrustment;
import com.hbsi.domain.SteelWireData;
import com.hbsi.domain.TensileStrength;
import com.hbsi.domain.WireAttributesGbt201182017;
import com.hbsi.domain.WireData;
import com.hbsi.domain.WireRope;
import com.hbsi.entity.WireRopeData;
import com.hbsi.exception.BaseException;
import com.hbsi.exception.ExceptionEnum;
import com.hbsi.response.Response;
import com.hbsi.wire.service.WireRopeService;


@Service
public class WireRopeServiceImpl implements WireRopeService{
	private Logger logger=LoggerFactory.getLogger(WireRopeService.class);
	@Autowired
	private WireRopeMapper wireRopeMapper;
	@Autowired
	private EntrustmentMapper entrustmentMapper;
	@Autowired
	private WireDataMapper wireDataMapper;
	@Autowired
	private SteelWireDataMapper steelWireDataMapper;
	//GBT20118-2017 属性
	@Autowired
	private WireAttributesGbt201182017Mapper wireAttrMapperGBT201182017;
	//直径允许误差
	@Autowired
	private DiameterDeviationMapper diameterDeviationMapper;

	 /*抗拉强度允许值*/
	@Autowired
	private TensileStrengthMapper tensileStrengthMapper;
	/**
	 * 查询和创建钢丝绳报告
	 */
	@Override
	public Response<WireRope> selectOrCreateWR(String enstrustmentNumber) {
		WireRope wireRope=wireRopeMapper.selectByEnsNum(enstrustmentNumber);
		if(wireRope==null) {
			Entrustment e=new Entrustment();
			e.setEntrustmentNumber(enstrustmentNumber);
			Entrustment en=entrustmentMapper.selectEntrustmentNumber(e);
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
			SimpleDateFormat sd=new SimpleDateFormat("yyyy-MM");
			wireRope=new WireRope();
			wireRope.setEnstrustmentNumber(enstrustmentNumber);
			wireRope.setReportDate(sdf.format(new Date()));
			wireRope.setReportNumber("L-"+sd.format(new Date())+"-"+en.getSampleBatch());
			wireRope.setStockSplitMethod("部分试验");
			wireRope.setRecorderNumber("DG"+sd.format(new Date())+"-"+en.getSampleBatch());
			try {
				int i=wireRopeMapper.insertSelective(wireRope);
			} catch (Exception ex) {
				logger.error("添加钢丝绳报告出现错误:{}",ex.getLocalizedMessage());
				throw new BaseException(ExceptionEnum.WIREROPE_SAVE_ERROR);
			}
		}
		return new Response<WireRope>(wireRope);
	}
	/**
	 * 调入数据
	 * 1、先查看钢丝绳数据中有没有数据，如果没有，将钢丝数据取出来，对应添加到钢丝绳数据中返回
	 */
	@Override
	public Response<List<WireData>> selectWireData(WireRope wireRope) {
		String entrustmentNumber=wireRope.getEnstrustmentNumber();
		WireRope wr=wireRopeMapper.selectByEnsNum(entrustmentNumber);
		if(wr!=null) {
			exchange(wr, wireRope);
		}else {
			wr=wireRope;
		}
		List<WireData> wireList=wireDataMapper.selectByEnNum(entrustmentNumber);
		if(wireList==null||wireList.size()==0) {
			wireList=new ArrayList<WireData>();
			List<SteelWireData> slist=steelWireDataMapper.selectByEnNum(entrustmentNumber);
			if(slist==null||slist.size()==0) {
				logger.error("没有数据");
			}else {
				String cl=wr.getTrialClass();
				String[] str=cl.split(",");
				List<String[]> l=new ArrayList<>();
				for(int i=0;i<str.length;i++) {
					String s=str[i];
					String[] ss=s.split("*");
					l.add(ss);
				}
				int n=1;
				int m=0;
				for(SteelWireData s:slist) {
					String[] nd=l.get(m);
					WireData w=new WireData();
					w.setnDiamete(Double.parseDouble(nd[0]));
					w.setDiamete(s.getfDiamete());
					w.setBreakTensile(s.getBreakTensile());
					w.setTensileStrength(s.getTensileStrength());
					w.setKnotTension(s.getKnotTension());
					w.setKnotRate(s.getKnotRate());
					w.setTurnTimes(s.getTorsionTimes());
					w.setWindingTimes(s.getBendingTimes());
					w.setEntrustmentNumber(entrustmentNumber);
					wireList.add(w);
					Integer num=Integer.parseInt(nd[1]);
					if(n==num) {
						n=1;
						m++;
					}else {
						n++;
					}
				}
				try {
					int j=wireRopeMapper.updateByPrimaryKey(wr);
					int i=wireDataMapper.insertWireDataBatch(wireList);
				} catch (Exception e) {
					logger.error("添加钢丝绳数据失败,{}",e.getLocalizedMessage());
					throw new BaseException(ExceptionEnum.WIREROPE_DATA_SAVE_ERROR);
				}
			}
		}
		return new Response<List<WireData>>(wireList);
	}
	/**
	 * 钢丝绳总和判定  标准 GBT20118-2017
	 * 先保存数据
	 * 1.计算最小钢丝破断拉力
	 * 2.计算实测钢丝拉力总和
	 * 3、直径判定
	 * 4、抗拉强度判定
	 * 5、扭转次数判定
	 * 6、弯曲次数判定
	 * 7、
	 */
	@Override
	public Response<Object> judgeWireRopeGbt201182017(WireRope wireRope) {
		/*数据保存*/
		if(wireRope==null) {
			logger.error("没有数据");
			
		}else {
			/*修改钢丝绳数据*/
			saveWireData(wireRope);
			/*计算钢丝破断拉力*/
			double wireBreak=calWireBreakTensile(wireRope);
			/*计算钢丝绳最小破断拉力总和*/
			//查询捻制损失系数
			WireAttributesGbt201182017 att=wireAttrMapperGBT201182017.selectTanningByStructure(wireRope.getStructure());
			double wireBreakAll=wireBreak*att.getTanningLossFactor();
			/**
			 * 对每根钢丝进行判定
			 */
			int diamaten=0;//直径不合格数量
			int diamatem=0;//直径有偏差但在允许范围内的直径数量
			int breakn=0;//破断拉力不合格数量
			int strengthn=0;//抗拉强度不合格
			int strengthm=0;//抗拉强度低值
			int turnn=0;//扭转次数不合格数量
			int windingn=0;//弯曲次数不合格数量
			List<WireData> dataList=wireRope.getWireDataList();
			double ndiamate=0;
			WireRopeData wireRopeData=new WireRopeData();
			wireRopeData.setStandardNum(wireRope.getTestStandard());
			String surface=wireRope.getSurfaceState();
			if(surface.contains("光面")) {
				surface="U";
			}else if(surface.contains("A类")||surface.contains("A级")){
				surface="A";
			}else if(surface.contains("B类")||surface.contains("B级")){
				surface="B";
			}else if(surface.contains("AB类")||surface.contains("AB级")){
				surface="AB";
			}
			if(surface.equals("U")||surface.equals("B")||surface.equals("AB")) {
				surface="U,B,AB";
			}
			wireRopeData.setSurface(surface);
			DiameterDeviation dd=null;
			double standardBreak=0;
			//钢丝最小破断拉力系数
			double minBreakForce=att.getMinimumBreakingForce();
			Integer strengthLevel=Integer.parseInt(wireRope.getStrengthLevel());
			/**
			 * 计算标准抗拉强度允许值
			 */
			TensileStrength tensileS=new TensileStrength();
			tensileS.setStandardNum(wireRope.getTestStandard());
			tensileS.setRatedStrength(Integer.parseInt(wireRope.getStrengthLevel()));
			List<TensileStrength> tensileTlist=tensileStrengthMapper.selectByStrengthLevel(tensileS);
			/*******************/
			for(WireData wireData:dataList) {
				/**
				 * 直径判断
				 * |钢丝直径-公称直径|<=允许的误差值，不超出允许误差值的50%
				 */
				if(ndiamate!=wireData.getnDiamete()) {
					ndiamate=wireData.getnDiamete();
					wireRopeData.setNdiamete(ndiamate);
				   dd=diameterDeviationMapper.selectDiaByType(wireRopeData);
				   //计算钢丝的标准破断拉力值
				  double breakValue=minBreakForce*Math.pow(ndiamate, 2)*strengthLevel/1000.0;
				  standardBreak=getValue(breakValue);
				}
				double diamete=wireData.getDiamete();//钢丝直径
				if(Math.abs(diamete-ndiamate)>dd.getValue()*1.5) {
					diamaten++;//直径不合格数量加1
				}else if(Math.abs(diamete-ndiamate)>dd.getValue()) {
					diamatem++;//直径允许最大偏差+1
				}
				/**
				 * 拉力判断
				 */
				if(wireData.getBreakTensile()<standardBreak) {
					breakn++;
				}
				/**
				 * 抗拉强度判断
				 * 先在抗拉强度表中进行查询，按照11页进行判定。若查询为空，按照表9 注，进行计算允许最低抗拉强度低值
				 */
				
				/**
				 * 扭转次数
				 */
				
				
				/**
				 * 弯曲次数
				 */
			}
			
		}
		return null;
	}
	/**
	 * 对破断拉力进行修约
	 * @param n
	 * @return
	 */
	private  double getValue(double n) {
		if(n<100) {
			/**
			 * 保留一位小数
			 */
			double result=0;
			int x=(int)(n*100);
			int l1=x%10;//第二位小数
			if(l1<5) {
				result=Math.round(n*10)/10.0;
			}else if(l1>5) {
				result=Math.round(n*10)/10.0;
			}else if(l1==5) {//看第三位小数
				String s=(n+"00").substring((n+"00").indexOf('.')+3);
				Integer s0=Integer.parseInt(s);
				if(s0!=0) {//不是0
					int a=Integer.parseInt(s.charAt(0)+"");
					if(a%2==0) {
						result=Math.round((Math.round(n*10)/10.0-0.1)*10)/10.0;
					}else {
						result=Math.round(n*10)/10.0;
					}
				}else {
					int a=((int)n)%10;
					if(a%2==0) {
						result=Math.round((Math.round(n*10)/10.0-0.1)*10)/10.0;
					}else {
						result=Math.round(n*10)/10.0;
					}
				}
			}
			return result;
		}else if(n<1000) {
			/**
			 * 小数舍弃
			 */
			Integer x=(int)(n*10);
			int l1=x%10;
			int result=0;
			if(l1<5&&l1>0) {
				 result=(int)n;
			}else if(l1>5) {
				 result=(int)n+1;
			}else if(l1==5) {
				//判断后一位小数，如果不是都是0，单数进1，双数舍去；若都是0，则看个位数，单数进1，偶数舍去
				String s=(n+"0").substring((n+"0").indexOf('.')+2);
				Integer s0=Integer.parseInt(s);
				if(s0!=0) {//如果不是0，则看第二位小数
					int a=Integer.parseInt(s.charAt(0)+"") ;
					if(a%2==0) {
						result=(int)n;
					}else {
						result=(int)n+1;
					}
				}else {//如果是0，则看舍弃的前一位，即个位数
					int y=(int)n;
					int l2=y%10;
					if(l2%2==0) {
						result=(int)n;
					}else {
						result=(int)n+1;
					}
				}
			}
			return result;
		}else {
			/**
			 * 个位数修约成0
			 */
			int x=(int)n;
			int l1=x%10;
			int result=0;
			if(l1<5) {
				result=x-l1;
			}else if(l1>5){
				result=x-l1+10;
			}else if(l1==5) {
				String s=(n+"0").substring((n+"0").indexOf('.')+1);
				Integer s0=Integer.parseInt(s);
				if(s0!=0) {//如果不是0，则看舍弃的后一位，即第一位小数
					int a=Integer.parseInt(s.charAt(0)+"") ;
					if(a%2==0) {
						result=x-l1;
					}else {
						result=x-l1+10;
					}
				}else {//如果是0，则看舍弃的前一位，即十位数
					int a=(x%100)/10;//十位数
					if(a%2==0) {
						result=x-l1;
					}else {
						result=x-l1+10;
					}
				}
			}
			return result;
		}
	}
	
	
	
	/**
	 * 计算钢丝的最小破断拉力
	 * @param wireRope
	 * @return
	 * 试验钢丝的拉力+不试验钢丝的计算拉力
	 * 试验钢丝的拉力为一股中拉力相加，*股数
	 * 不试验钢丝的计算拉力=绳级*面积
	 */
	private double calWireBreakTensile(WireRope wireRope) {
		/*试验钢丝的拉力*/
		String trialClass=wireRope.getTrialClass();
		String[] s=trialClass.split(",");
		List<double[]> list=new ArrayList<>();
		//获取试验钢丝的直径、根数、股数
		for(int i=0;i<s.length;i++) {
			String s1=s[i];
			double[] d=new double[4];
			d[0]=Double.parseDouble(s1.substring(0, s1.indexOf("*")));
			d[1]=Double.parseDouble(s1.substring(s1.indexOf("*")+1,s1.indexOf("/")));
			d[2]=Double.parseDouble(s1.substring(s1.indexOf("/")+1));
			d[2]=d[2]/d[1];
			list.add(d);
		}
		//计算试验钢丝的拉力
		List<WireData> dataList=wireRope.getWireDataList();
		for(int i=0;i<list.size();i++) {
			double[] d=list.get(i);
			double f=0;
			for(WireData data:dataList) {
				if(data.getnDiamete()==d[0]) {
					f+=data.getBreakTensile();
				}
			}
			d[3]=f;
			list.add(i, d);
		}
		double trialF=0;//试验钢丝拉力总和
		for(double[] d:list) {
			trialF+=d[2]*d[3];
		}
		//计算不试验钢丝拉力总和
		String nonTrial=wireRope.getNonTrialClass();
		double nonTrialF=0;//不试验钢丝拉力总和
		String[] nons=nonTrial.split(",");
		for(String ns:nons) {
			String[] nss=ns.split("*");
			double diamate=Double.parseDouble(nss[0]);
			int n=Integer.parseInt(nss[1]);
			nonTrialF+=Math.PI*Math.pow(diamate/2, 2)*(Integer.parseInt(wireRope.getStrengthLevel()))*n;
		}
 		return trialF+nonTrialF;
	}
	/**
	 * 修改钢丝绳数据
	 * @param wireRope
	 */
	private void saveWireData(WireRope wireRope) {
		WireRope w=wireRopeMapper.selectByEnsNum(wireRope.getEnstrustmentNumber());
		exchange(w, wireRope);
		List<WireData> dataList=wireDataMapper.selectByEnNum(wireRope.getEnstrustmentNumber());
		List<WireData> list=wireRope.getWireDataList();
		for(WireData d:dataList) {
			for(WireData l:list) {
				if(d.getId()==l.getId()) {
					wireDataChange(d, l);
					dataList.add(d);
				}
			}
		}
		try {
			int i=wireRopeMapper.updateByPrimaryKey(w);
			int j=wireDataMapper.updateWireDataBatch(dataList);
		} catch (Exception e) {
			logger.error("修改钢丝绳数据出现错误:{}",e.getLocalizedMessage());
		}
	}
	
	private void exchange(WireRope w,WireRope r) {
		if(r.getProducerNumber()!=null&&!"".equals(r.getProducerNumber())) {
			w.setProducerNumber(r.getProducerNumber());
		}
		if(r.getReportNumber()!=null&&!"".equals(r.getReportNumber())) {
			w.setReportNumber(r.getReportNumber());
		}
		if(r.getReportDate()!=null&&!"".equals(r.getReportDate())) {
			w.setReportDate(r.getReportDate());
		}
		if(r.getSpecification()!=null&&!"".equals(r.getSpecification())) {
			w.setSpecification(r.getSpecification());
		}
		if(r.getStructure()!=null&&!"".equals(r.getStructure())){
			w.setStructure(r.getStructure());
		}
		if(r.getStrengthLevel()!=null&&!"".equals(r.getStrengthLevel())) {
			w.setStrengthLevel(r.getStrengthLevel());
		}
		if(r.getSurfaceState()!=null&&!"".equals(r.getSurfaceState())) {
			w.setSurfaceState(r.getSurfaceState());
		}
		if(r.getTwistingMethod()!=null&&!"".equals(r.getTwistingMethod())) {
			w.setTwistingMethod(r.getTwistingMethod());
		}
		if(r.getMeasureBreakTensile()!=0) {
			w.setMeasureBreakTensile(r.getMeasureBreakTensile());
		}
		if(r.getMinBreakTensile()!=0) {
			w.setMinBreakTensile(r.getMinBreakTensile());
		}
		if(r.getDiamete()!=0) {
			w.setDiamete(r.getDiamete());
		}
		w.setDiameteNonRundness(r.getDiameteNonRundness());
		if(r.getStockSplitMethod()!=null) {
			w.setStockSplitMethod(r.getStockSplitMethod());
		}
		if(r.getTrialClass()!=null) {
			w.setTrialClass(r.getTrialClass());
		}
		if(r.getNonTrialClass()!=null) {
			w.setNonTrialClass(r.getNonTrialClass());
		}
		w.setCenterDiamete(r.getCenterDiamete());
		w.setCenterStrength(r.getCenterStrength());
		if(r.getEvaluation()!=null) {
			w.setEvaluation(r.getEvaluation());
		}
		if(r.getMemo()!=null) {
			w.setMemo(r.getMemo());
		}
		if(r.getTemperature()!=null) {
			w.setTemperature(r.getTemperature());
		}
		if(r.getTestStandard()!=null) {
			w.setTestStandard(r.getTestStandard());
		}
		if(r.getRecorderNumber()!=null) {
			w.setRecorderNumber(r.getRecorderNumber());
		}
		if(r.getRecorderMemo()!=null) {
			w.setRecorderMemo(r.getRecorderMemo());
		}
	}
	private void wireDataChange(WireData w,WireData d) {
		if(d.getnDiamete()!=null) {
			w.setnDiamete(d.getnDiamete());
		}
//		if(d.getDiamete()!=null) {
//			w.setDiamete(d.getDiamete());
//		}
//		if(d.getBreakTensile()!=null) {
//			w.setBreakTensile(d.getBreakTensile());
//		}
	}

}














