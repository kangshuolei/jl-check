package com.hbsi.basedata;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.stereotype.Component;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;

import com.hbsi.JlCheckApplication;
import com.hbsi.basedata.zinclayerweight.service.ZincLayerWeightService;
import com.hbsi.domain.FromValue;
import com.hbsi.domain.ZincLayerWeight;
import com.hbsi.response.Response;

@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes =JlCheckApplication.class)
@WebAppConfiguration
@Component
@ConfigurationProperties(prefix = "path")
public class ZincLayerWeightTest {

	@Resource
	private ZincLayerWeightService zincLayerWeightService;
	
//	@Test
	public void testSelectAllData() {
		 Response<List<ZincLayerWeight>> selectZincLayerWeight = zincLayerWeightService.selectZincLayerWeight();
		System.out.println(selectZincLayerWeight);
	}
	
//	@Test
	public void testDeleteZincLayerWeight() {
		Response<Integer> response =zincLayerWeightService.deleteZincLayerWeight(7);
		System.out.println(response);
	}
//	@Test
	public void testsaveSingleZincLayerWeight() {
		ZincLayerWeight zincLayerWeight=new ZincLayerWeight();
		zincLayerWeight.setDiameteMax(0.1);
		zincLayerWeight.setDiameteMin(0.15);
		zincLayerWeight.setStandardNum("111");
		zincLayerWeight.setSurfaceState("A");
		zincLayerWeight.setValue(1233);
		Response<Integer> response = zincLayerWeightService.saveSingleZincLayerWeight(zincLayerWeight);
		System.out.println(response);
	}
//	@Test
	public void testsaveZincLayerWeight() {
		ZincLayerWeight zincLayerWeight=new ZincLayerWeight();
		zincLayerWeight.setDiameteMax(0.1);
		zincLayerWeight.setDiameteMin(0.15);
		zincLayerWeight.setStandardNum("111");
		zincLayerWeight.setSurfaceState("A");
		zincLayerWeight.setValue(1233);
		ZincLayerWeight zincLayerWeight2=new ZincLayerWeight();
		zincLayerWeight2.setDiameteMax(0.1);
		zincLayerWeight2.setDiameteMin(0.15);
		zincLayerWeight2.setStandardNum("111");
		zincLayerWeight2.setSurfaceState("A");
		zincLayerWeight2.setValue(1233);
		List<ZincLayerWeight> list = new ArrayList<ZincLayerWeight>();
        list.add(zincLayerWeight);
        list.add(zincLayerWeight2);
        Response<Integer> response = zincLayerWeightService.saveZincLayerWeight(list);
		System.out.println(list);
		System.out.println(response);
	}
	
//	@Test
	public void testupdateZincLayerWeight() {
		ZincLayerWeight zincLayerWeight2=new ZincLayerWeight();
		zincLayerWeight2.setId(1);
		zincLayerWeight2.setDiameteMax(0.12);
		zincLayerWeight2.setDiameteMin(0.17);
		zincLayerWeight2.setStandardNum("222");
		zincLayerWeight2.setSurfaceState("B");
		zincLayerWeight2.setValue(1233);
		Response<Integer> response = zincLayerWeightService.updateZincLayerWeight(zincLayerWeight2);
		System.out.println(response);
	}
//	@Test
	public void testDeleteAllData() {
		Response<Integer> deleteAllData = zincLayerWeightService.deleteAllData();
		
	}
//	/**
//	 * 测试三种read方法
//	 * @throws IOException 
//	 */
////	@Test
//	public void testReadMetod1() throws IOException {
//		File file = new File("/Users/admin/Desktop/test.docx");
//		InputStream is = new FileInputStream(file);
//		OutputStream out = new FileOutputStream("/Users/admin/Desktop/xiangze/ctest.docx");
//		byte[] b=new byte[is.available()];
//		System.out.println(is.available()+"看看这个是不是文件总长度");
//		int len = 0;//代表当前读到缓冲区的长度
//		while(len<is.available()) {
//			len+=is.read(b, len, is.available()-len);
//			System.out.println(len+"/n");
//		}
//		out.write(b);
//		System.out.println(b.length+"kankan现在b的长度");
//		out.flush();
//		out.close();
//		is.close();
//	}
//	
//	/**
//	 * 测试三种read方法
//	 * @throws IOException 
//	 */
////	@Test
//	public void testReadMetod2() throws IOException {
//		File file = new File("/Users/admin/Desktop/test.docx");
//		InputStream is = new FileInputStream(file);
//		OutputStream out = new FileOutputStream("/Users/admin/Desktop/xiangze/csstest.docx");
//		byte[] b=new byte[1024];
//		int len = 0;//代表当前读到缓冲区的长度
//		while((len = is.read(b)) != -1) {
//			System.out.println(len);
//			out.write(b);
//		}
//		out.flush();
//		out.close();
//		is.close();
//	}
//	
//	/**
//	 * 测试三种read方法
//	 * @throws IOException 
//	 */
////	@Test
//	public void testReadMetod3() throws IOException {
//		File file = new File("/Users/admin/Desktop/test.docx");
//		InputStream is = new FileInputStream(file);
//		OutputStream out = new FileOutputStream("/Users/admin/Desktop/xiangze/csstest.docx");
//		byte[] b=new byte[is.available()];
//		int len = 0;//代表当前读到缓冲区的长度
//		while((len = is.read(b)) != -1) {
//			System.out.println(len);
//			out.write(b);
//		}
//		out.flush();
//		out.close();
//		is.close();
//	}
//	/**
//	 * 测试yml的加载方式
//	 */
//	@Value("${path.basePath}")
//	String basePath;
////	@Test
//	public void testYmlLoading() {
//		System.out.println(basePath);
//	}
//	//测试流怎么关闭
//	@Test
//	public void testStreamCloseMethod() {
//		try {
//		File file = new File("/Users/admin/Desktop/test.docx");
//		InputStream is = new FileInputStream(file);
//		OutputStream out = new FileOutputStream("/Users/admin/Desktop/xiangze/csstest.docx");
//		byte[] b=new byte[is.available()];
//		int len = 0;//代表当前读到缓冲区的长度
//			while((len = is.read(b)) != -1) {
//				out.write(b);
//			}
//			while(out != null) {
//				out.close();
//				System.out.println(out.toString());
//			}
//		is.close();
//	}catch(Exception e) {
//		}
//	}
}
