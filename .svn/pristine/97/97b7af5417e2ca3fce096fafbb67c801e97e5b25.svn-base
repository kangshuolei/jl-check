package com.hbsi.common.utils.excel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.github.pagehelper.StringUtil;
import com.hbsi.common.utils.StringUtils;

public class WriteExcel {
	private static final String EXCEL_XLS = "xls";
	private static final String EXCEL_XLSX = "xlsx";

	public static void writeExcel(List<Map<Integer, Object>> dataList, String finalXlsxPath) throws Exception {
//			HSSFRow readRow;
		// 读取Excel文档
		File finalXlsxFile = new File(finalXlsxPath);
		Workbook workBook = getWorkbok(finalXlsxFile);
		// sheet 对应一个工作页
		HSSFSheet sheet = (HSSFSheet) workBook.getSheetAt(0);
		/**
		 * 读取的最大行数，总是有空行，所以这么搞一搞，删除空行
		 */
		List<Integer> realNumberOfRow = realNumberOfRow(sheet);
		int realNum = realNumberOfRow.indexOf(realNumberOfRow.size() - 1);
		realNum++;
		// 创建文件输出流，输出电子表格：这个必须有，否则你在sheet上做的任何操作都不会有效
		OutputStream out = new FileOutputStream(finalXlsxPath);
		workBook.write(out);
		/**
		 * 往Excel中写新数据
		 */
		for (int j = 0; j < dataList.size(); j++) {
			// 创建一行：从第二行开始，跳过属性列
			Row row = sheet.createRow(j + realNum);
			Map<Integer, Object> map = dataList.get(j);
			Set<Integer> keys = map.keySet();
			/**
			 * 新的设置格式的时髦写法为
			 */
			for (int k = 0; k < keys.size(); k++) {
				/**
				 * 新建单元格，设置格式
				 */
				Cell cell = sheet.getRow(j + realNum).createCell(k);
//					cell.setCellStyle(style);
				/**
				 * 用val存储map中一条数据，验证格式，存进excel中
				 */
				Object val = map.get(k);
				/**
				 * 根据val的不同类型，直接存储到excel中，因为excel可以识别数据类型
				 */
				if (val == null) {
					cell.setCellValue("");
				} else if (val instanceof String) {
					cell.setCellValue((String) val);
				} else if (val instanceof Integer) {
					cell.setCellValue((Integer) val);
				} else if (val instanceof Long) {
					cell.setCellValue((Long) val);
				} else if (val instanceof Double) {
					cell.setCellValue((Double) val);
				} else if (val instanceof Float) {
					cell.setCellValue((Float) val);
				} else if (val instanceof Date) {
					DataFormat format = workBook.createDataFormat();
//						style.setDataFormat(format.getFormat("yyyy/MM/dd"));
					cell.setCellValue((Date) val);
				} else if (val instanceof BigDecimal) {
					double doubleVal = ((BigDecimal) val).doubleValue();
					DataFormat format = workBook.createDataFormat();
//						style.setDataFormat(format.getFormat("￥#,##0.00"));
					cell.setCellValue(doubleVal);
				} else {
					cell.setCellValue(val.toString());
				}
			}
		}
		// 创建文件输出流，准备输出电子表格：这个必须有，否则你在sheet上做的任何操作都不会有效
		out = new FileOutputStream(finalXlsxPath);
		workBook.write(out);
		workBook.close();
		out.flush();
		out.close();

		System.out.println("数据导出成功");
	}

	/**
	 * 判断Excel的版本,获取Workbook
	 * 
	 * @param in
	 * @param filename
	 * @return
	 * @throws IOException
	 */
	public static Workbook getWorkbok(File file) throws IOException {
		Workbook wb = null;
		FileInputStream in = new FileInputStream(file);
		if (file.getName().endsWith(EXCEL_XLS)) { // Excel 2003
			wb = new HSSFWorkbook(in);
		} else if (file.getName().endsWith(EXCEL_XLSX)) { // Excel 2007/2010
			wb = new XSSFWorkbook(in);
		}
		return wb;
	}

	/**
	 * 获取有效行数的方法。
	 * 
	 * @param sheet
	 * @return
	 */
	public static List<Integer> realNumberOfRow(HSSFSheet sheet) {
		int realNums = 0;
		int firstNum = sheet.getFirstRowNum();
		int lastNum = sheet.getLastRowNum();
		List<Integer> number = new ArrayList<Integer>();// 获取每个有值的行数下标
		for (int i = firstNum; i <= lastNum; i++) {

			HSSFRow row = sheet.getRow(i);
			int end = 0;
			if (row != null) {
				end = row.getLastCellNum();
			} /*
				 * else{//将为空的行删除 sheet.shiftRows(i+1, sheet.getLastRowNum()+1,-1); continue; }
				 */
			boolean isNotBlankRow = false;
			for (int j = 0; j < end; j++) {
				HSSFCell cell = row.getCell(j);
				// 若有一个单元格不为空则此行非空
				if (cell != null) {
					int cellType = cell.getCellType();
					String cellValue = null;
					if (cellType == HSSFCell.CELL_TYPE_BLANK) {// 将为空的行删除
						// sheet.shiftRows(i+1, sheet.getLastRowNum()+1,-1);
						cellValue = "";
						continue;
					} else if (cellType == HSSFCell.CELL_TYPE_BOOLEAN) {
						cellValue = String.valueOf(cell.getBooleanCellValue());
					} else if (cellType == HSSFCell.CELL_TYPE_ERROR) {
						cellValue = String.valueOf(cell.getErrorCellValue());
					} else if (cellType == HSSFCell.CELL_TYPE_FORMULA) {
						cellValue = cell.getCellFormula();
					} else if (cellType == HSSFCell.CELL_TYPE_NUMERIC) {
						DecimalFormat df = new DecimalFormat("#");
						if (HSSFDateUtil.isCellDateFormatted(cell)) {
							SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
							cellValue = sdf.format(HSSFDateUtil.getJavaDate(cell.getNumericCellValue()));
							// 如果是date类型则 ，获取该cell的date值
							// value = HSSFDateUtil.getJavaDate(cell.getNumericCellValue()).toString();
						} else { // 纯数字
							cellValue = df.format(cell.getNumericCellValue());
						}
						// cellValue = String.valueOf(cell.getNumericCellValue());
					} else if (cellType == HSSFCell.CELL_TYPE_STRING) {
						cellValue = cell.getStringCellValue();
					} else {

					}
					if (!StringUtils.isBlank(cellValue)) {
						isNotBlankRow = true;
						break;
					}
				}
			}
			if (isNotBlankRow) {
				number.add(i);
				realNums += 1;
			}
		}
		return number;
	}

}
